const int MaxVnum=100;
typedef char VexType;
typedef struct AdjNode{ 
	int v; 
	struct AdjNode *next; 
}AdjNode;
typedef struct VexNode{ 
	VexType data; 
	AdjNode *first; 
}VexNode;
typedef struct{
    VexNode  Vex[MaxVnum];
    int vexnum,edgenum; 
}ALGragh;
int locatevex(ALGragh G,VexType x)
{
    for(int i=0;i<G.vexnum;i++)
       if(x==G.Vex[i].data)
        return i;
    return -1;}
void insertedge(ALGragh &G,int i,int j)//插入一条边
{
    AdjNode *s;
    s=new AdjNode;
    s->v=j;
    s->next=G.Vex[i].first;
    G.Vex[i].first=s;
}
void CreateALGraph(ALGragh &G)
{
    int i,j;
    VexType u,v;
    cin>>G.vexnum>>G.edgenum;
    for(i=0;i<G.vexnum;i++)
        cin>>G.Vex[i].data;
    for(i=0;i<G.vexnum;i++)
        G.Vex[i].first=NULL;
    cout<<"请依次输入每条边的两个顶点u,v"<<endl;
    while(G.edgenum--)
    {
        cin>>u>>v;
        i=locatevex(G,u);//查找顶点u的存储下标
        j=locatevex(G,v);//查找顶点v的存储下标
        if(i!=-1&&j!=-1)
            insertedge(G,i,j);
        else
        {
           cout << "输入顶点信息错！请重新输入！"<<endl;
           G.edgenum++;//本次输入不算
        }
    }
}
